// Assigment 2: Data Structures
// Name: Samantha Gonzalez
// Date: 02/27/2025
#include <iostream>
#include "ConsoleApplication19.h"
using namespace std;

//Define Node Structure
struct Node {
    int data;
    Node* next;
    Node* prev;

    //Constructor to set up Node with data
    Node(int val) : data(val), next(nullptr), prev(nullptr) {}
};

// Class for the doubly linked list
class DoublyLinkedList {
public:
    //Pointer of the head node on the list
    Node* head;

    //Constructor for list set up
    DoublyLinkedList() : head(nullptr) {}

    //Function to insert a node at a specific index location
    void insert(int data, int index) {
        Node* new_node = new Node(data);

        //If Statement for inserting at the head (index 0)
        if (index == 0) {
            new_node->next = head;
            if (head != nullptr) {
                head->prev = new_node;
            }
            head = new_node;
            return;
        }

        //Identifying the previous node at the given index
        Node* current = head;
        int current_index = 0;
        while (current != nullptr && current_index < index - 1) {
            current = current->next;
            current_index++;
        }

        if (current == nullptr) {
            cout << "Index out of range" << endl;
            delete new_node;
            return;
        }

        //Function to insert the new node
        new_node->next = current->next;
        if (current->next != nullptr) {
            current->next->prev = new_node;
        }
        current->next = new_node;
        new_node->prev = current;
    }

    //Function to delete a node at a specific index
    void deleteNode(int index) {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        //If Statement for deleting the head node
        if (index == 0) {
            Node* temp = head;
            head = head->next;
            if (head != nullptr) {
                head->prev = nullptr;
            }
            delete temp;
            return;
        }

        Node* current = head;
        int current_index = 0;
        while (current != nullptr && current_index < index) {
            current = current->next;
            current_index++;
        }

        if (current == nullptr) {
            cout << "Index out of range" << endl;
            return;
        }

        //Function Statement for removing the node
        if (current->next != nullptr) {
            current->next->prev = current->prev;
        }
        if (current->prev != nullptr) {
            current->prev->next = current->next;
        }

        delete current;
    }

    //Function to display the list via output
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

//Function to test the doubly linked list
int main() {
    DoublyLinkedList dll;

    //Inserting elements into the doubly linked list
    dll.insert(5, 0);  //Insert 5 at index 0
    dll.insert(10, 1);  //Insert 10 at index 1
    dll.insert(15, 1);  //Insert 15 at index 1 (between 5 and 10)
    dll.insert(20, 3);  //Insert 20 at index 3

    cout << "List after insertions: ";
    dll.display();

    //Function to delete a node at index 1
    dll.deleteNode(1);

    cout << "List after deletion: ";
    dll.display();

    return 0;
}
